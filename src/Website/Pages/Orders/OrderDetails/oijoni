import React, { useEffect, useState } from "react";
import { Card, CardHeader, CardBody, CardFooter, Container, Col, Row, Navbar, Table, Button, Modal, ModalHeader, ModalBody, ModalFooter } from "reactstrap";
import { useParams } from "react-router-dom";
import { Link } from "react-router-dom";
import { axiosInstance } from "Axios.js";
import "./OrderDetail";
import Swal from 'sweetalert2';

const OrderDetail = () => {
  const { id } = useParams();
  const [orderdata, setOrderData] = useState({});
  const [productData, setProductData] = useState([]);
  const [paymentStatus, setPaymentStatus] = useState(orderdata.payment_status);
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedAddress, setSelectedAddress] = useState("");

  useEffect(() => {
    axiosInstance
      .get(`/profile`)
      .then((res) => {
        console.log(res.data);
        setOrderData(res.data.data);
        fetchProductData(res.data.data.products);
        const updatedOrderData = res.data.data;
        setPaymentStatus(updatedOrderData.payment_status);
      })
      .catch((err) => {
        console.log(err.message);
      });
  }, []);

  
  const getProductImageById = (productId) => {
    const product = productData.find((product) => product.id === productId);
    return product ? product.image : "";
  };

  const getProductNameById = (productId) => {
    const product = productData.find((product) => product.id === productId);
    return product ? product.name_ar : "";
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "Completed":
        return "text-success";
      case "Cancelled":
        return "text-danger";
      case "Pending":
        return "text-primary";
      case "Processing":
        return "text-warning";
      default:
        return "";
    }
  };

  const handleStatusChange = async () => {
    try {
      const { value } = await Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to ${
          orderdata.status === 'Completed' ? 'reorder' : 'cancel'
        } this order?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
      });

      if (value) {
        if (orderdata.status === 'Completed') {
          setModalOpen(true);
        } else if (orderdata.status === 'Pending') {
          // Update order status to 'Cancelled'
          await axiosInstance.delete(`/orders/${orderdata._id}`, { status: 'Cancelled' });
          setOrderData((prevOrderData) => ({ ...prevOrderData, status: 'Cancelled' }));
          Swal.fire('Order Cancelled!', 'The order has been cancelled.', 'success');
        }
      }
    } catch (error) {
      console.log(error.message);
      Swal.fire('Error', 'An error occurred. Please try again.', 'error');
    }
  };

  const handleReorder = async () => {
    try {
      const addressId = selectedAddress;
      if (!addressId) {
        Swal.fire('Error', 'Please select an address.', 'error');
        return;
      }

      // Get the selected address object
      const selectedAddressObj = orderdata.address.find(address => address._id === addressId);

      // Extract the required address fields
      const { area, city, governorate, country } = selectedAddressObj;

      // Prepare the data for the reorder request
      const reorderData = {
        address: {
          area,
          city,
          governorate,
          country
        },
        products: orderdata.products.map((product) => ({
          id: product.id,
          quantity: product.quantity,
        })),
      };

      // Make the reorder request
      await axiosInstance.post('/orders', reorderData);
      Swal.fire('Reorder Success!', 'Your order has been placed successfully.', 'success');
    } catch (error) {
      console.log(error.message);
      Swal.fire('Error', 'An error occurred. Please try again.', 'error');
    } finally {
      setModalOpen(false);
    }
  };

  return (
    <>
      <Navbar className="navbar-top navbar-horizontal navbar-light" expand="md">
        <Container className="px-4">
          <Link to="/admin/orders" className="btn btn-icon btn-primary" style={{ marginTop: -15 }}>
            <span className="btn-inner--icon">
              <i className="fas fa-long-arrow-alt-left" />
            </span>
          </Link>
        </Container>
      </Navbar>
      <Container className="mt--6" fluid>
        <Row>
          <div className="col">
            <Card className="shadow">
              <CardHeader className="border-0">
                <Row>
                  <Col xs="6">
                    <h3 className="mb-0">Order Details</h3>
                  </Col>
                  <Col className="text-right" xs="6">
                    <Button
                      color={orderdata.status === "Completed" ? "danger" : "success"}
                      disabled={orderdata.status === "Processing"}
                      onClick={handleStatusChange}
                      size="sm"
                    >
                      {orderdata.status === "Completed" ? "Reorder" : "Cancel Order"}
                    </Button>
                  </Col>
                </Row>
              </CardHeader>
              <CardBody>
                <Row>
                  <Col>
                    <Table className="align-items-center table-flush" responsive>
                      <thead className="thead-light">
                        <tr>
                          <th scope="col">Product</th>
                          <th scope="col">Image</th>
                          <th scope="col">Quantity</th>
                          <th scope="col">Price</th>
                          <th scope="col">Total</th>
                        </tr>
                      </thead>
                      <tbody>
                        {orderdata.products &&
                          orderdata.products.map((product, index) => (
                            <tr key={index}>
                              <th scope="row">{getProductNameById(product.id)}</th>
                              <td>
                                <img
                                  alt={getProductNameById(product.id)}
                                  className="avatar rounded-circle mr-3"
                                  src={getProductImageById(product.id)}
                                />
                              </td>
                              <td>{product.quantity}</td>
                              <td>{product.price}</td>
                              <td>{product.price * product.quantity}</td>
                            </tr>
                          ))}
                      </tbody>
                      <tfoot>
                        <tr>
                          <td colSpan="4" className="text-right">
                            <strong>Total:</strong>
                          </td>
                          <td>{orderdata.total_price}</td>
                        </tr>
                      </tfoot>
                    </Table>
                  </Col>
                </Row>
                <Row>
                  <Col>
                    <h3>Addresses</h3>
                    {orderdata.address &&
                      orderdata.address.map((address, index) => (
                        <div key={index}>
                          <input
                            type="radio"
                            name="address"
                            value={address._id}
                            checked={selectedAddress === address._id}
                            onChange={() => setSelectedAddress(address._id)}
                          />
                          <label htmlFor={address._id}>
                            {`${address.area}, ${address.city}, ${address.governorate}, ${address.country}`}
                          </label>
                        </div>
                      ))}
                  </Col>
                </Row>
              </CardBody>
              <CardFooter>
                <Row>
                  <Col>
                    <Button
                      color="primary"
                      onClick={() => setModalOpen(true)}
                      disabled={orderdata.status !== "Completed"}
                    >
                      Reorder
                    </Button>
                  </Col>
                </Row>
              </CardFooter>
            </Card>
          </div>
        </Row>
      </Container>
      <Modal isOpen={modalOpen} toggle={() => setModalOpen(!modalOpen)}>
        <ModalHeader toggle={() => setModalOpen(!modalOpen)}>Confirm Reorder</ModalHeader>
        <ModalBody>
          Are you sure you want to reorder this order?
        </ModalBody>
        <ModalFooter>
          <Button color="primary" onClick={handleReorder}>Reorder</Button>
          <Button color="secondary" onClick={() => setModalOpen(!modalOpen)}>Cancel</Button>
        </ModalFooter>
      </Modal>
    </>
  );
};

export default OrderDetail;
