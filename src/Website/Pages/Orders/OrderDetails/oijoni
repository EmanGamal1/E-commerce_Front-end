import React, { useEffect, useState } from "react";
import { Card, CardHeader, CardBody, CardFooter, Container, Col, Row, Navbar, Table, Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Label, Input } from "reactstrap";
import { useParams } from "react-router-dom";
import { Link } from "react-router-dom";
import { axiosInstance } from "Axios.js";
import Swal from "sweetalert2";

const OrderDetail = () => {
  const { id } = useParams();
  const [orderdata, setOrderData] = useState({});
  const [productData, setProductData] = useState([]);
  const [paymentStatus, setPaymentStatus] = useState(orderdata.payment_status);
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedAddress, setSelectedAddress] = useState("");

  useEffect(() => {
    axiosInstance
      .get(`/orders/${id}`)
      .then((res) => {
        console.log(res.data);
        setOrderData(res.data.data);
        fetchProductData(res.data.data.products);
        const updatedOrderData = res.data.data;
        setPaymentStatus(updatedOrderData.payment_status);
      })
      .catch((err) => {
        console.log(err.message);
      });
  }, [id]);

  const fetchProductData = async (products) => {
    const productId = products.map((product) => product.id);
    const productResponse = await axiosInstance.get("/products");
    console.log(productResponse.data); // Add this line to check the structure of the response
    const productDataWithImage = productResponse.data.data.map((product) => {
      if (productId.includes(product.id)) {
        const productImage = product.images[0] || "";
        return { ...product, image: productImage };
      }
      return product;
    });
    setProductData(productDataWithImage);
  };

  const getProductImageById = (productId) => {
    const product = productData.find((product) => product.id === productId);
    return product ? product.image : "";
  };

  const getProductNameById = (productId) => {
    const product = productData.find((product) => product.id === productId);
    return product ? product.name_ar : "";
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "Completed":
        return "text-success";
      case "Cancelled":
        return "text-danger";
      case "Pending":
        return "text-primary";
      case "Processing":
        return "text-warning";
      default:
        return "";
    }
  };

  const handleStatusChange = async () => {
    try {
      const { value } = await Swal.fire({
        title: "Are you sure?",
        text: `Do you want to ${orderdata.status === "Completed" ? "reorder" : "cancel"} this order?`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes",
        cancelButtonText: "No",
      });

      if (value) {
        if (orderdata.status === "Completed") {
          // Update order status to 'Pending'
          await axiosInstance.post(`/orders/${orderdata._id}/reorder`, { status: "Pending" });
          setOrderData((prevOrderData) => ({ ...prevOrderData, status: "Pending" }));
          Swal.fire("Order Reordered!", "The order status has been changed to Pending.", "success");
        } else {
          // Update order status to 'Cancelled'
          await axiosInstance.post(`/orders/${orderdata._id}/cancel`, { status: "Cancelled" });
          setOrderData((prevOrderData) => ({ ...prevOrderData, status: "Cancelled" }));
          Swal.fire("Order Cancelled!", "The order status has been changed to Cancelled.", "success");
        }
      }
    } catch (error) {
      console.log(error);
      Swal.fire("Error", "An error occurred while updating the order status.", "error");
    }
  };

  const toggleModal = () => {
    setModalOpen(!modalOpen);
  };

  const handleReorderConfirmation = async () => {
    if (selectedAddress) {
      try {
        // Create a new order with the selected address_id and status 'Pending'
        const newOrder = {
          address_id: selectedAddress,
          status: "Pending",
        };

        // Make an API call to create the new order
        const response = await axiosInstance.post("/orders", newOrder);

        // Display success message
        Swal.fire("Order Created!", "A new order has been created.", "success");

        // Close the modal and update the order status
        setModalOpen(false);
        setOrderData((prevOrderData) => ({ ...prevOrderData, status: "Pending" }));
      } catch (error) {
        console.log(error);
        Swal.fire("Error", "An error occurred while creating the order.", "error");
      }
    }
  };

  const renderCancelButton = () => {
    if (orderdata.status === "Completed") {
      return (
        <Button onClick={toggleModal} className="btn-success btn">
          اعادة الشراء
        </Button>
      );
    } else if (orderdata.status === "Pending") {
      return (
        <Button onClick={handleStatusChange} className="btn-danger btn">
          الغاء الطلب
        </Button>
      );
    }
  };

  return (
    <>
      <Navbar expand="lg" color="dark" dark>
        <Container>
          <Navbar.Brand tag={Link} to="/">
            Admin Panel
          </Navbar.Brand>
        </Container>
      </Navbar>
      <Container className="mt-5">
        <Card>
          <CardHeader>تفاصيل الطلب</CardHeader>
          <CardBody>
            <Row>
              <Col>
                <h5>رقم الطلب: {orderdata.order_number}</h5>
                <h5>العميل: {orderdata.user ? orderdata.user.name : ""}</h5>
                <h5>الحالة: <span className={getStatusColor(orderdata.status)}>{orderdata.status}</span></h5>
              </Col>
              <Col>
                <h5>تاريخ الطلب: {new Date(orderdata.created_at).toLocaleDateString("en-GB")}</h5>
                <h5>المبلغ الإجمالي: {orderdata.total_amount} ريال</h5>
                <h5>حالة الدفع: {paymentStatus}</h5>
              </Col>
            </Row>
            <Table className="mt-3" striped responsive>
              <thead>
                <tr>
                  <th>#</th>
                  <th>الصورة</th>
                  <th>المنتج</th>
                  <th>السعر</th>
                  <th>الكمية</th>
                </tr>
              </thead>
              <tbody>
                {orderdata.products &&
                  orderdata.products.map((product, index) => (
                    <tr key={index}>
                      <th scope="row">{index + 1}</th>
                      <td>
                        <img src={getProductImageById(product.id)} alt={getProductNameById(product.id)} className="img-thumbnail" width="100" height="100" />
                      </td>
                      <td>{getProductNameById(product.id)}</td>
                      <td>{product.pivot.price}</td>
                      <td>{product.pivot.quantity}</td>
                    </tr>
                  ))}
              </tbody>
            </Table>
          </CardBody>
          <CardFooter>
            <Button onClick={handleStatusChange} className="btn-primary btn">
              {orderdata.status === "Completed" ? "إعادة الطلب" : "إلغاء الطلب"}
            </Button>
            {renderCancelButton()}
          </CardFooter>
        </Card>
      </Container>
      <Modal isOpen={modalOpen} toggle={toggleModal}>
        <ModalHeader toggle={toggleModal}>اختر عنوانًا</ModalHeader>
        <ModalBody>
          <FormGroup>
            <Label for="address">العنوان</Label>
            <Input type="select" name="address" id="address" value={selectedAddress} onChange={(e) => setSelectedAddress(e.target.value)}>
              <option value="">اختر العنوان</option>
              {orderdata.user && orderdata.user.addresses.map((address) => (
                <option key={address.id} value={address.id}>
                  {address.address}
                </option>
              ))}
            </Input>
          </FormGroup>
        </ModalBody>
        <ModalFooter>
          <Button color="primary" onClick={handleReorderConfirmation}>
            إعادة الشراء
          </Button>
          <Button color="secondary" onClick={toggleModal}>
            إلغاء
          </Button>
        </ModalFooter>
      </Modal>
    </>
  );
};

export default OrderDetail;
